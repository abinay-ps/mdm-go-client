
/*
 * Master Data Management API
 *
 * A comprehensive API suite for managing various aspects of the postal system, including office management, product management, tariffs (domestic and international), product country mapping, local pin codes, country details, and currency exchange rates. Additionally, the API supports insurance quote generation for PLI/RPLI, and interest rate calculations for savings schemes such as SB, SSA, PPF, MIS, TD, NSC/KVP, SCSS, and MSS.
 *
 * API version: 1.0
 * Contact: support_cept@indiapost.gov.in
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type InternationalTariffApiService service

/*
InternationalTariffApiService Calculate the tariff for international blind literature
Calculates the tariff information for international blind literature based on various parameters, including product code, country code, weight, dimensions, and value-added services (VAS).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param countryCode
 * @param productCode
 * @param weight
 * @param optional nil or *InternationalTariffApiInternationalTariffsBlindLiteraturesGetOpts - Optional Parameters:
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "ModeOfTransmission" (optional.String) - 
     * @param "VasCode" (optional.Interface of []string) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetFgnBlindLiteratureTariffApiResponse
*/

type InternationalTariffApiInternationalTariffsBlindLiteraturesGetOpts struct { 
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	ModeOfTransmission optional.String
	VasCode optional.Interface
	Width optional.Float32
}

func (a *InternationalTariffApiService) InternationalTariffsBlindLiteraturesGet(ctx context.Context, countryCode string, productCode string, weight float32, localVarOptionals *InternationalTariffApiInternationalTariffsBlindLiteraturesGetOpts) (ResponseGetFgnBlindLiteratureTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetFgnBlindLiteratureTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/international-tariffs/blind-literatures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("country-code", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("mode-of-transmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas-code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetFgnBlindLiteratureTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Calculate the tariff for international bulk bags
Calculates the tariff information for international bulk bags based on various parameters, including product code, country code, weight, dimensions, and value-added services (VAS).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param countryCode
 * @param productCode
 * @param weight
 * @param optional nil or *InternationalTariffApiInternationalTariffsBulkBagsGetOpts - Optional Parameters:
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "InsAmount" (optional.String) - 
     * @param "Length" (optional.Float32) - 
     * @param "ModeOfTransmission" (optional.String) - 
     * @param "VasCode" (optional.Interface of []string) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetFgnBulkBagTariffApiResponse
*/

type InternationalTariffApiInternationalTariffsBulkBagsGetOpts struct { 
	Diameter optional.Float32
	Height optional.Float32
	InsAmount optional.String
	Length optional.Float32
	ModeOfTransmission optional.String
	VasCode optional.Interface
	Width optional.Float32
}

func (a *InternationalTariffApiService) InternationalTariffsBulkBagsGet(ctx context.Context, countryCode string, productCode string, weight float32, localVarOptionals *InternationalTariffApiInternationalTariffsBulkBagsGetOpts) (ResponseGetFgnBulkBagTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetFgnBulkBagTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/international-tariffs/bulk-bags"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("country-code", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InsAmount.IsSet() {
		localVarQueryParams.Add("ins-amount", parameterToString(localVarOptionals.InsAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("mode-of-transmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas-code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetFgnBulkBagTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Calculate the tariff for international speed documents
Calculate the tariff information for international speed documents based on various parameters, including product code, country code, weight, dimensions, and value-added services (VAS).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param countryCode
 * @param productCode
 * @param weight
 * @param optional nil or *InternationalTariffApiInternationalTariffsEmsGetOpts - Optional Parameters:
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "InsAmount" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "ModeOfTransmission" (optional.String) - 
     * @param "VasCode" (optional.Interface of []string) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetFgnSpeedDocumentTariffApiResponse
*/

type InternationalTariffApiInternationalTariffsEmsGetOpts struct { 
	Diameter optional.Float32
	Height optional.Float32
	InsAmount optional.Float32
	Length optional.Float32
	ModeOfTransmission optional.String
	VasCode optional.Interface
	Width optional.Float32
}

func (a *InternationalTariffApiService) InternationalTariffsEmsGet(ctx context.Context, countryCode string, productCode string, weight float32, localVarOptionals *InternationalTariffApiInternationalTariffsEmsGetOpts) (ResponseGetFgnSpeedDocumentTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetFgnSpeedDocumentTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/international-tariffs/ems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("country-code", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InsAmount.IsSet() {
		localVarQueryParams.Add("ins-amount", parameterToString(localVarOptionals.InsAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("mode-of-transmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas-code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetFgnSpeedDocumentTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Calculate the tariff for international tracked packets
Calculate the tariff information for international tracked packets based on various parameters, including product code, country code, weight, dimensions, and value-added services (VAS).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param countryCode
 * @param productCode
 * @param weight
 * @param optional nil or *InternationalTariffApiInternationalTariffsItpsGetOpts - Optional Parameters:
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "InsAmount" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "ModeOfTransmission" (optional.String) - 
     * @param "VasCode" (optional.Interface of []string) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetFgnItpsTariffApiResponse
*/

type InternationalTariffApiInternationalTariffsItpsGetOpts struct { 
	Diameter optional.Float32
	Height optional.Float32
	InsAmount optional.Float32
	Length optional.Float32
	ModeOfTransmission optional.String
	VasCode optional.Interface
	Width optional.Float32
}

func (a *InternationalTariffApiService) InternationalTariffsItpsGet(ctx context.Context, countryCode string, productCode string, weight float32, localVarOptionals *InternationalTariffApiInternationalTariffsItpsGetOpts) (ResponseGetFgnItpsTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetFgnItpsTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/international-tariffs/itps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("country-code", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InsAmount.IsSet() {
		localVarQueryParams.Add("ins-amount", parameterToString(localVarOptionals.InsAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("mode-of-transmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas-code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetFgnItpsTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Calculate the tariff for foreign letters
Calculates the tariff information for a foreign letter based on various parameters, including product code, country code, weight, dimensions, and value-added services (VAS).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param countryCode
 * @param productCode
 * @param weight
 * @param optional nil or *InternationalTariffApiInternationalTariffsLettersGetOpts - Optional Parameters:
     * @param "Height" (optional.Float32) - 
     * @param "InsAmount" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "ModeOfTransmission" (optional.String) - 
     * @param "VasCode" (optional.Interface of []string) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetFgnLetterTariffApiResponse
*/

type InternationalTariffApiInternationalTariffsLettersGetOpts struct { 
	Height optional.Float32
	InsAmount optional.Float32
	Length optional.Float32
	ModeOfTransmission optional.String
	VasCode optional.Interface
	Width optional.Float32
}

func (a *InternationalTariffApiService) InternationalTariffsLettersGet(ctx context.Context, countryCode string, productCode string, weight float32, localVarOptionals *InternationalTariffApiInternationalTariffsLettersGetOpts) (ResponseGetFgnLetterTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetFgnLetterTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/international-tariffs/letters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("country-code", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InsAmount.IsSet() {
		localVarQueryParams.Add("ins-amount", parameterToString(localVarOptionals.InsAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("mode-of-transmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas-code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetFgnLetterTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Calculate the tariff for foreign parcels
Calculate the tariff information for a foreign parcel based on various parameters, including product code, country code, weight, dimensions, and value-added services (VAS).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param countryCode
 * @param productCode
 * @param weight
 * @param optional nil or *InternationalTariffApiInternationalTariffsParcelsGetOpts - Optional Parameters:
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "InsAmount" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "ModeOfTransmission" (optional.String) - 
     * @param "VasCode" (optional.Interface of []string) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetFgnParcelTariffApiResponse
*/

type InternationalTariffApiInternationalTariffsParcelsGetOpts struct { 
	Diameter optional.Float32
	Height optional.Float32
	InsAmount optional.Float32
	Length optional.Float32
	ModeOfTransmission optional.String
	VasCode optional.Interface
	Width optional.Float32
}

func (a *InternationalTariffApiService) InternationalTariffsParcelsGet(ctx context.Context, countryCode string, productCode string, weight float32, localVarOptionals *InternationalTariffApiInternationalTariffsParcelsGetOpts) (ResponseGetFgnParcelTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetFgnParcelTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/international-tariffs/parcels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("country-code", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InsAmount.IsSet() {
		localVarQueryParams.Add("ins-amount", parameterToString(localVarOptionals.InsAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("mode-of-transmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas-code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetFgnParcelTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Calculate the tariff for international printed papers
Calculate the tariff information for international printed papers based on various parameters, including product code, country code, weight, dimensions, and value-added services (VAS).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param countryCode
 * @param productCode
 * @param weight
 * @param optional nil or *InternationalTariffApiInternationalTariffsPrintedPapersGetOpts - Optional Parameters:
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "InsAmount" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "ModeOfTransmission" (optional.String) - 
     * @param "VasCode" (optional.Interface of []string) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetFgnPrintedPapersTariffApiResponse
*/

type InternationalTariffApiInternationalTariffsPrintedPapersGetOpts struct { 
	Diameter optional.Float32
	Height optional.Float32
	InsAmount optional.Float32
	Length optional.Float32
	ModeOfTransmission optional.String
	VasCode optional.Interface
	Width optional.Float32
}

func (a *InternationalTariffApiService) InternationalTariffsPrintedPapersGet(ctx context.Context, countryCode string, productCode string, weight float32, localVarOptionals *InternationalTariffApiInternationalTariffsPrintedPapersGetOpts) (ResponseGetFgnPrintedPapersTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetFgnPrintedPapersTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/international-tariffs/printed-papers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("country-code", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InsAmount.IsSet() {
		localVarQueryParams.Add("ins-amount", parameterToString(localVarOptionals.InsAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("mode-of-transmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas-code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetFgnPrintedPapersTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Calculate the tariff for international small packets
Calculate the tariff information for international small packets based on various parameters, including product code, country code, weight, dimensions, and value-added services (VAS).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param countryCode
 * @param productCode
 * @param weight
 * @param optional nil or *InternationalTariffApiInternationalTariffsSmallPacketsGetOpts - Optional Parameters:
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "InsAmount" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "ModeOfTransmission" (optional.String) - 
     * @param "VasCode" (optional.Interface of []string) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetFgnSmallPacketsTariffApiResponse
*/

type InternationalTariffApiInternationalTariffsSmallPacketsGetOpts struct { 
	Diameter optional.Float32
	Height optional.Float32
	InsAmount optional.Float32
	Length optional.Float32
	ModeOfTransmission optional.String
	VasCode optional.Interface
	Width optional.Float32
}

func (a *InternationalTariffApiService) InternationalTariffsSmallPacketsGet(ctx context.Context, countryCode string, productCode string, weight float32, localVarOptionals *InternationalTariffApiInternationalTariffsSmallPacketsGetOpts) (ResponseGetFgnSmallPacketsTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetFgnSmallPacketsTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/international-tariffs/small-packets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("country-code", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.InsAmount.IsSet() {
		localVarQueryParams.Add("ins-amount", parameterToString(localVarOptionals.InsAmount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("mode-of-transmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas-code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetFgnSmallPacketsTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

