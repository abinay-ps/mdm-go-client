
/*
 * Master Data Management
 *
 * This is Master Data Management API with Swagger documentation
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type InternationalTariffApiService service

/*
InternationalTariffApiService Get International Blind Literature Tariff
Gives tariff for International Blind Literature Tariff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param countryCode Country Code
 * @param optional nil or *InternationalTariffApiInternationalproductsTariffBlindliteratureGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter
     * @param "ModeOfTransmission" (optional.String) -  Mode of Transmission
     * @param "VasCode" (optional.Interface of []string) -  VAS Codes

@return HandlerResponse
*/

type InternationalTariffApiInternationalproductsTariffBlindliteratureGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
	ModeOfTransmission optional.String
	VasCode optional.Interface
}

func (a *InternationalTariffApiService) InternationalproductsTariffBlindliteratureGet(ctx context.Context, productCode string, weight string, countryCode string, localVarOptionals *InternationalTariffApiInternationalproductsTariffBlindliteratureGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/internationalproducts/tariff/blindliterature"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("CountryCode", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("ModeOfTransmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas_code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Get International Bulk Bag Tariff
Gives tariff for International Bulk Bag Tariff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param countryCode Country Code
 * @param optional nil or *InternationalTariffApiInternationalproductsTariffBulkbagGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter
     * @param "INSAMOUNT" (optional.String) -  Ins Amount
     * @param "ModeOfTransmission" (optional.String) -  Mode of Transmission
     * @param "VasCode" (optional.Interface of []string) -  VAS Codes

@return HandlerResponse
*/

type InternationalTariffApiInternationalproductsTariffBulkbagGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
	INSAMOUNT optional.String
	ModeOfTransmission optional.String
	VasCode optional.Interface
}

func (a *InternationalTariffApiService) InternationalproductsTariffBulkbagGet(ctx context.Context, productCode string, weight string, countryCode string, localVarOptionals *InternationalTariffApiInternationalproductsTariffBulkbagGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/internationalproducts/tariff/bulkbag"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("CountryCode", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSAMOUNT.IsSet() {
		localVarQueryParams.Add("INS_AMOUNT", parameterToString(localVarOptionals.INSAMOUNT.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("ModeOfTransmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas_code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Get International Speed Document Tariff
Gives tariff for International Speed Document Tariff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param countryCode Country Code
 * @param optional nil or *InternationalTariffApiInternationalproductsTariffEmsGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter
     * @param "ModeOfTransmission" (optional.String) -  Mode of Transmission
     * @param "VasCode" (optional.Interface of []string) -  VAS Codes

@return HandlerResponse
*/

type InternationalTariffApiInternationalproductsTariffEmsGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
	ModeOfTransmission optional.String
	VasCode optional.Interface
}

func (a *InternationalTariffApiService) InternationalproductsTariffEmsGet(ctx context.Context, productCode string, weight string, countryCode string, localVarOptionals *InternationalTariffApiInternationalproductsTariffEmsGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/internationalproducts/tariff/ems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("CountryCode", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("ModeOfTransmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas_code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Get International Tracked Packets Tariff
Gives tariff for International Tracked Packets Tariff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param countryCode Country Code
 * @param optional nil or *InternationalTariffApiInternationalproductsTariffItpsGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter
     * @param "ModeOfTransmission" (optional.String) -  Mode of Transmission
     * @param "VasCode" (optional.Interface of []string) -  VAS Codes

@return HandlerResponse
*/

type InternationalTariffApiInternationalproductsTariffItpsGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
	ModeOfTransmission optional.String
	VasCode optional.Interface
}

func (a *InternationalTariffApiService) InternationalproductsTariffItpsGet(ctx context.Context, productCode string, weight string, countryCode string, localVarOptionals *InternationalTariffApiInternationalproductsTariffItpsGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/internationalproducts/tariff/itps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("CountryCode", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("ModeOfTransmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas_code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Get International Letter Tariff
Gives tariff for International Letter
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param countryCode Country Code
 * @param optional nil or *InternationalTariffApiInternationalproductsTariffLetterGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter
     * @param "ModeOfTransmission" (optional.String) -  Mode of Transmission
     * @param "VasCode" (optional.Interface of []string) -  VAS Codes
     * @param "INSAMOUNT" (optional.String) -  Ins Amount

@return HandlerResponse
*/

type InternationalTariffApiInternationalproductsTariffLetterGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
	ModeOfTransmission optional.String
	VasCode optional.Interface
	INSAMOUNT optional.String
}

func (a *InternationalTariffApiService) InternationalproductsTariffLetterGet(ctx context.Context, productCode string, weight string, countryCode string, localVarOptionals *InternationalTariffApiInternationalproductsTariffLetterGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/internationalproducts/tariff/letter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("CountryCode", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("ModeOfTransmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas_code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.INSAMOUNT.IsSet() {
		localVarQueryParams.Add("INS_AMOUNT", parameterToString(localVarOptionals.INSAMOUNT.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Get International Parcel Tariff
Gives tariff for International Parcel Tariff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param countryCode Country Code
 * @param optional nil or *InternationalTariffApiInternationalproductsTariffParcelGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter
     * @param "ModeOfTransmission" (optional.String) -  Mode of Transmission
     * @param "VasCode" (optional.Interface of []string) -  VAS Codes
     * @param "INSAMOUNT" (optional.String) -  INS Amount

@return HandlerResponse
*/

type InternationalTariffApiInternationalproductsTariffParcelGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
	ModeOfTransmission optional.String
	VasCode optional.Interface
	INSAMOUNT optional.String
}

func (a *InternationalTariffApiService) InternationalproductsTariffParcelGet(ctx context.Context, productCode string, weight string, countryCode string, localVarOptionals *InternationalTariffApiInternationalproductsTariffParcelGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/internationalproducts/tariff/parcel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("CountryCode", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("ModeOfTransmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas_code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	if localVarOptionals != nil && localVarOptionals.INSAMOUNT.IsSet() {
		localVarQueryParams.Add("INS_AMOUNT", parameterToString(localVarOptionals.INSAMOUNT.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Get International Printed Papers Tariff
Gives tariff for International Printed Papers Tariff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param countryCode Country Code
 * @param optional nil or *InternationalTariffApiInternationalproductsTariffPrintedpapersGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter
     * @param "INSAMOUNT" (optional.String) -  INS Amount
     * @param "ModeOfTransmission" (optional.String) -  Mode of Transmission
     * @param "VasCode" (optional.Interface of []string) -  VAS Codes

@return HandlerResponse
*/

type InternationalTariffApiInternationalproductsTariffPrintedpapersGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
	INSAMOUNT optional.String
	ModeOfTransmission optional.String
	VasCode optional.Interface
}

func (a *InternationalTariffApiService) InternationalproductsTariffPrintedpapersGet(ctx context.Context, productCode string, weight string, countryCode string, localVarOptionals *InternationalTariffApiInternationalproductsTariffPrintedpapersGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/internationalproducts/tariff/printedpapers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("CountryCode", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSAMOUNT.IsSet() {
		localVarQueryParams.Add("INS_AMOUNT", parameterToString(localVarOptionals.INSAMOUNT.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("ModeOfTransmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas_code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InternationalTariffApiService Get International Small Packets Tariff
Gives tariff for International Small Packets Tariff
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param countryCode Country Code
 * @param optional nil or *InternationalTariffApiInternationalproductsTariffSmallpacketsGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter
     * @param "INSAMOUNT" (optional.String) -  INS Amount
     * @param "ModeOfTransmission" (optional.String) -  Mode of Transmission
     * @param "VasCode" (optional.Interface of []string) -  VAS Codes

@return HandlerResponse
*/

type InternationalTariffApiInternationalproductsTariffSmallpacketsGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
	INSAMOUNT optional.String
	ModeOfTransmission optional.String
	VasCode optional.Interface
}

func (a *InternationalTariffApiService) InternationalproductsTariffSmallpacketsGet(ctx context.Context, productCode string, weight string, countryCode string, localVarOptionals *InternationalTariffApiInternationalproductsTariffSmallpacketsGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/internationalproducts/tariff/smallpackets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("CountryCode", parameterToString(countryCode, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSAMOUNT.IsSet() {
		localVarQueryParams.Add("INS_AMOUNT", parameterToString(localVarOptionals.INSAMOUNT.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ModeOfTransmission.IsSet() {
		localVarQueryParams.Add("ModeOfTransmission", parameterToString(localVarOptionals.ModeOfTransmission.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VasCode.IsSet() {
		localVarQueryParams.Add("vas_code", parameterToString(localVarOptionals.VasCode.Value(), "csv"))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

