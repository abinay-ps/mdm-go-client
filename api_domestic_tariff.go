
/*
 * Master Data Management API
 *
 * A comprehensive API suite for managing various aspects of the postal system, including office management, product management, tariffs (domestic and international), product country mapping, local pin codes, country details, and currency exchange rates. Additionally, the API supports insurance quote generation for PLI/RPLI, and interest rate calculations for savings schemes such as SB, SSA, PPF, MIS, TD, NSC/KVP, SCSS, and MSS.
 *
 * API version: 1.0
 * Contact: support_cept@indiapost.gov.in
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type DomesticTariffApiService service

/*
DomesticTariffApiService Get DAPL tariff based on product code, weight, dimensions, and pincodes
Calculate the DAPL tariff using the provided details, including product code, weight, dimensions (length, width, height, diameter),
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param destinationPincode
 * @param productCode
 * @param sourcePincode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsApsDaplGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "INSC" (optional.String) - 
     * @param "POD" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetDaplTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsApsDaplGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	INSC optional.String
	POD optional.String
	REG optional.String
	VPP optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsApsDaplGet(ctx context.Context, destinationPincode int32, productCode string, sourcePincode int32, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsApsDaplGetOpts) (ResponseGetDaplTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetDaplTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/aps-dapl"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSC.IsSet() {
		localVarQueryParams.Add("INSC", parameterToString(localVarOptionals.INSC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.POD.IsSet() {
		localVarQueryParams.Add("POD", parameterToString(localVarOptionals.POD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	localVarQueryParams.Add("destination-pincode", parameterToString(destinationPincode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("source-pincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetDaplTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get SDS tariff based on product code, weight, and optional parameters
Calculate the SDS tariff using the product code, weight, and optional parameters such as REG, INS, ACK, VPP, AMS, and dimensions (length, width, height).
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsApsSdsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetSdsTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsApsSdsGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsApsSdsGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsApsSdsGetOpts) (ResponseGetSdsTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetSdsTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/aps-sds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetSdsTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Bill Mail tariff based on product code, weight, and quantity
Calculate the Bill Mail tariff using the product code, weight, and quantity provided.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param quantity
 * @param weight

@return ResponseGetBillMailTariffApiResponse
*/
func (a *DomesticTariffApiService) DomesticTariffsBillMailsGet(ctx context.Context, productCode string, quantity int32, weight float32) (ResponseGetBillMailTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetBillMailTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/bill-mails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("quantity", parameterToString(quantity, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetBillMailTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get blind literature tariff based on various parameters
Calculate the blind literature tariff using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsBlindLiteraturesGetOpts - Optional Parameters:
     * @param "ACKBL" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "REGBL" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetBlindLiteratureTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsBlindLiteraturesGetOpts struct { 
	ACKBL optional.String
	AMS optional.String
	REGBL optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsBlindLiteraturesGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsBlindLiteraturesGetOpts) (ResponseGetBlindLiteratureTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetBlindLiteratureTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/blind-literatures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACKBL.IsSet() {
		localVarQueryParams.Add("ACKBL", parameterToString(localVarOptionals.ACKBL.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REGBL.IsSet() {
		localVarQueryParams.Add("REGBL", parameterToString(localVarOptionals.REGBL.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetBlindLiteratureTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get the book packet periodical tariff based on various parameters
Calculate the tariff for a book packet using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsBookPacketPeriodicalsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Value" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetBookTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsBookPacketPeriodicalsGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Value optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsBookPacketPeriodicalsGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsBookPacketPeriodicalsGetOpts) (ResponseGetBookTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetBookTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/book-packet-periodicals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.Value.IsSet() {
		localVarQueryParams.Add("value", parameterToString(localVarOptionals.Value.Value(), ""))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetBookTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get book tariff based on various parameters
Calculate the book tariff using product details and various additional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsBookPacketsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Value" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetBookTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsBookPacketsGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Value optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsBookPacketsGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsBookPacketsGetOpts) (ResponseGetBookTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetBookTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/book-packets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.Value.IsSet() {
		localVarQueryParams.Add("value", parameterToString(localVarOptionals.Value.Value(), ""))
	}
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetBookTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get business parcel tariff based on various parameters
Calculate the business parcel tariff using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param destinationPincode
 * @param productCode
 * @param sourcePincode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsBusinessParcelsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "INSC" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetBusinessParcelTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsBusinessParcelsGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	INSC optional.String
	REG optional.String
	VPP optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsBusinessParcelsGet(ctx context.Context, destinationPincode string, productCode string, sourcePincode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsBusinessParcelsGetOpts) (ResponseGetBusinessParcelTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetBusinessParcelTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/business-parcels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSC.IsSet() {
		localVarQueryParams.Add("INSC", parameterToString(localVarOptionals.INSC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	localVarQueryParams.Add("destination-pincode", parameterToString(destinationPincode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("source-pincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetBusinessParcelTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get direct post tariff based on various parameters
Calculate the direct post tariff using the provided product details, weight, and pincode information.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param destinationPincode
 * @param productCode
 * @param quantity
 * @param sourcePincode
 * @param weight

@return ResponseGetDirectPostTariffApiResponse
*/
func (a *DomesticTariffApiService) DomesticTariffsDirectPostsGet(ctx context.Context, destinationPincode int32, productCode string, quantity int32, sourcePincode int32, weight float32) (ResponseGetDirectPostTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetDirectPostTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/direct-posts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("destination-pincode", parameterToString(destinationPincode, ""))
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("quantity", parameterToString(quantity, ""))
	localVarQueryParams.Add("source-pincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetDirectPostTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get EMO tariff based on product code and EMO amount
Calculate the EMO tariff using the product code and the EMO amount provided.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product code
 * @param emoAmount EMO Amount

@return ResponseGetEmoTariffApiResponse
*/
func (a *DomesticTariffApiService) DomesticTariffsEmoGet(ctx context.Context, productCode string, emoAmount float32) (ResponseGetEmoTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetEmoTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/emo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("emo-amount", parameterToString(emoAmount, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetEmoTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get IPO tariff based on product code and IPO amount
Calculate the IPO tariff using the product code and the IPO amount provided.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product code
 * @param ipoAmount IPO Amount

@return ResponseGetIpoTariffApiResponse
*/
func (a *DomesticTariffApiService) DomesticTariffsIpoGet(ctx context.Context, productCode string, ipoAmount float32) (ResponseGetIpoTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetIpoTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/ipo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("ipo-amount", parameterToString(ipoAmount, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetIpoTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get lettercard tariff based on various parameters
Calculate the lettercard tariff using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsLetterCardsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetLetterCardTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsLetterCardsGetOpts struct { 
	ACK optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsLetterCardsGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsLetterCardsGetOpts) (ResponseGetLetterCardTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetLetterCardTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/letter-cards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetLetterCardTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get letter tariff based on various parameters
Calculate the letter tariff using product details and additional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsLettersGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetLetterTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsLettersGetOpts struct { 
	ACK optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsLettersGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsLettersGetOpts) (ResponseGetLetterTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetLetterTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/letters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetLetterTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Magazine Post tariff based on product code, weight, dimensions, and pincodes
Calculate the Magazine Post tariff using the product code, weight, dimensions (length, width, height), and source/destination pincodes.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param destinationPincode
 * @param productCode
 * @param sourcePincode
 * @param weight Accepts int strings and floats
 * @param optional nil or *DomesticTariffApiDomesticTariffsMagazinePostsGetOpts - Optional Parameters:
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetMagazinePostTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsMagazinePostsGetOpts struct { 
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsMagazinePostsGet(ctx context.Context, destinationPincode int32, productCode string, sourcePincode int32, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsMagazinePostsGetOpts) (ResponseGetMagazinePostTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetMagazinePostTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/magazine-posts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("destination-pincode", parameterToString(destinationPincode, ""))
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("source-pincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetMagazinePostTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get National Bill Mail tariff based on product code, weight, and quantity
Calculate the National Bill Mail tariff using the product code, weight, and quantity provided.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param quantity
 * @param weight

@return ResponseGetBillMailTariffApiResponse
*/
func (a *DomesticTariffApiService) DomesticTariffsNationalBillMailsGet(ctx context.Context, productCode string, quantity int32, weight float32) (ResponseGetBillMailTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetBillMailTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/national-bill-mails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("quantity", parameterToString(quantity, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetBillMailTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get newspaper bundle tariff based on various parameters
Calculate the newspaper bundle tariff using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsNewspaperBundlesGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetNewspaperBundleTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsNewspaperBundlesGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsNewspaperBundlesGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsNewspaperBundlesGetOpts) (ResponseGetNewspaperBundleTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetNewspaperBundleTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/newspaper-bundles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetNewspaperBundleTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get newspaper tariff based on various parameters
Calculate the newspaper tariff using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsNewspapersGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetNewspaperTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsNewspapersGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsNewspapersGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsNewspapersGetOpts) (ResponseGetNewspaperTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetNewspaperTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/newspapers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetNewspaperTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get the non-variant product tariff based on the product code
Retrieve the tariff information for a non-variant product using its product code.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product code

@return ResponseListNonVariantProductApiResponse
*/
func (a *DomesticTariffApiService) DomesticTariffsNonVariantsGet(ctx context.Context, productCode string) (ResponseListNonVariantProductApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseListNonVariantProductApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/non-variants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseListNonVariantProductApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get parcel tariff based on various parameters
Calculate the parcel tariff using product details and various additional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsParcelsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetParcelTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsParcelsGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsParcelsGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsParcelsGetOpts) (ResponseGetParcelTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetParcelTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/parcels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetParcelTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get pattern sample packet tariff based on various parameters
Calculate the pattern sample packet tariff using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsPatternSamplePacketsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetPatternSamplePacketTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsPatternSamplePacketsGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsPatternSamplePacketsGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsPatternSamplePacketsGetOpts) (ResponseGetPatternSamplePacketTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetPatternSamplePacketTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/pattern-sample-packets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetPatternSamplePacketTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Post Card tariff based on product code, weight, length, and width
Calculate the Post Card tariff using the product code, weight, length, and width provided.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param optional nil or *DomesticTariffApiDomesticTariffsPostCardsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Length" (optional.Float32) - 
     * @param "Weight" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetPostCardTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsPostCardsGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	VPP optional.String
	Length optional.Float32
	Weight optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsPostCardsGet(ctx context.Context, productCode string, localVarOptionals *DomesticTariffApiDomesticTariffsPostCardsGetOpts) (ResponseGetPostCardTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetPostCardTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/post-cards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.Weight.IsSet() {
		localVarQueryParams.Add("weight", parameterToString(localVarOptionals.Weight.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetPostCardTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get printed book tariff based on various parameters
Calculate the printed book tariff using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsPrintedBooksGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "REGC" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetPrintedBookTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsPrintedBooksGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	REG optional.String
	REGC optional.String
	VPP optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsPrintedBooksGet(ctx context.Context, productCode string, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsPrintedBooksGetOpts) (ResponseGetPrintedBookTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetPrintedBookTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/printed-books"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REGC.IsSet() {
		localVarQueryParams.Add("REGC", parameterToString(localVarOptionals.REGC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetPrintedBookTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get the retail post product tariff based on the product code
Retrieve the tariff information for a retail post product using its product code.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product code

@return ResponseListRetailPostApiResponse
*/
func (a *DomesticTariffApiService) DomesticTariffsRetailsGet(ctx context.Context, productCode string) (ResponseListRetailPostApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseListRetailPostApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/retails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseListRetailPostApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get speed letter tariff based on various parameters
Calculate the speed letter tariff using product details and additional optional parameters.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param destinationPincode
 * @param productCode
 * @param sourcePincode
 * @param weight
 * @param optional nil or *DomesticTariffApiDomesticTariffsSpeedPostsGetOpts - Optional Parameters:
     * @param "ACK" (optional.String) - 
     * @param "AMS" (optional.String) - 
     * @param "INS" (optional.String) - 
     * @param "INSC" (optional.String) - 
     * @param "POD" (optional.String) - 
     * @param "REG" (optional.String) - 
     * @param "VPP" (optional.String) - 
     * @param "Diameter" (optional.Float32) - 
     * @param "Height" (optional.Float32) - 
     * @param "Length" (optional.Float32) - 
     * @param "Width" (optional.Float32) - 

@return ResponseGetSpeedLetterTariffApiResponse
*/

type DomesticTariffApiDomesticTariffsSpeedPostsGetOpts struct { 
	ACK optional.String
	AMS optional.String
	INS optional.String
	INSC optional.String
	POD optional.String
	REG optional.String
	VPP optional.String
	Diameter optional.Float32
	Height optional.Float32
	Length optional.Float32
	Width optional.Float32
}

func (a *DomesticTariffApiService) DomesticTariffsSpeedPostsGet(ctx context.Context, destinationPincode int32, productCode string, sourcePincode int32, weight float32, localVarOptionals *DomesticTariffApiDomesticTariffsSpeedPostsGetOpts) (ResponseGetSpeedLetterTariffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetSpeedLetterTariffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domestic-tariffs/speed-posts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSC.IsSet() {
		localVarQueryParams.Add("INSC", parameterToString(localVarOptionals.INSC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.POD.IsSet() {
		localVarQueryParams.Add("POD", parameterToString(localVarOptionals.POD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	localVarQueryParams.Add("destination-pincode", parameterToString(destinationPincode, ""))
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	localVarQueryParams.Add("product-code", parameterToString(productCode, ""))
	localVarQueryParams.Add("source-pincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetSpeedLetterTariffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

