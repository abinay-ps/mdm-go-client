
/*
 * Master Data Management
 *
 * This is Master Data Management API with Swagger documentation
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type DomesticTariffApiService service

/*
DomesticTariffApiService Get DAPL Tariff
Gives tariff for DAPL product
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param sourcePincode Source Pincode
 * @param destinationPincode Destination Pincode
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffApsDapltariffGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "INSC" (optional.String) -  InsC
     * @param "POD" (optional.String) -  Pod
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffApsDapltariffGetOpts struct { 
	REG optional.String
	INS optional.String
	INSC optional.String
	POD optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffApsDapltariffGet(ctx context.Context, productCode string, weight string, sourcePincode string, destinationPincode string, localVarOptionals *DomesticTariffApiDomesticproductsTariffApsDapltariffGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/aps/dapltariff"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSC.IsSet() {
		localVarQueryParams.Add("INSC", parameterToString(localVarOptionals.INSC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.POD.IsSet() {
		localVarQueryParams.Add("POD", parameterToString(localVarOptionals.POD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	localVarQueryParams.Add("SourcePincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("DestinationPincode", parameterToString(destinationPincode, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get SDS Tariff
Gives tariff for APS SDS Product
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffApsSdstariffGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffApsSdstariffGetOpts struct { 
	REG optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffApsSdstariffGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffApsSdstariffGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/aps/sdstariff"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Bill Mail Tariff
Gives tariff for Bill Mail Service
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param quantity Quantity

@return HandlerResponse
*/
func (a *DomesticTariffApiService) DomesticproductsTariffBillmailGet(ctx context.Context, productCode string, weight float32, quantity int32) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/billmail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("Quantity", parameterToString(quantity, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Blind Literature Tariff
Gives tariff for Blind Literature
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffBlindliteratureGetOpts - Optional Parameters:
     * @param "REGBL" (optional.String) -  RegBl
     * @param "INS" (optional.String) -  Ins
     * @param "ACKBL" (optional.String) -  AckBl
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffBlindliteratureGetOpts struct { 
	REGBL optional.String
	INS optional.String
	ACKBL optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffBlindliteratureGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffBlindliteratureGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/blindliterature"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REGBL.IsSet() {
		localVarQueryParams.Add("REGBL", parameterToString(localVarOptionals.REGBL.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACKBL.IsSet() {
		localVarQueryParams.Add("ACKBL", parameterToString(localVarOptionals.ACKBL.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Book Packet Tariff
Gives tariff for Book Packet
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffBookpacketGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffBookpacketGetOpts struct { 
	REG optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffBookpacketGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffBookpacketGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/bookpacket"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Book Packet containing Periodical Tariff
Gives tariff for Book Packet containing Periodicals
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffBpperiodicalGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Value" (optional.String) -  Value
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffBpperiodicalGetOpts struct { 
	REG optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Value optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffBpperiodicalGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffBpperiodicalGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/bpperiodical"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Value.IsSet() {
		localVarQueryParams.Add("Value", parameterToString(localVarOptionals.Value.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Business Parcel Tariff
Gives tariff for Business Parcel
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param sourcePincode Source Pincode
 * @param destinationPincode Destination Pincode
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffBusinessparcelGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "INSC" (optional.String) -  InsC
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffBusinessparcelGetOpts struct { 
	REG optional.String
	INS optional.String
	INSC optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffBusinessparcelGet(ctx context.Context, productCode string, weight string, sourcePincode string, destinationPincode string, localVarOptionals *DomesticTariffApiDomesticproductsTariffBusinessparcelGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/businessparcel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSC.IsSet() {
		localVarQueryParams.Add("INSC", parameterToString(localVarOptionals.INSC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	localVarQueryParams.Add("SourcePincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("DestinationPincode", parameterToString(destinationPincode, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Direct Post Tariff
Gives tariff for Direct Post
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param quantity Quantity
 * @param sourcePincode Source Pincode
 * @param destinationPincode Destination Pincode

@return HandlerResponse
*/
func (a *DomesticTariffApiService) DomesticproductsTariffDirectpostGet(ctx context.Context, productCode string, weight string, quantity string, sourcePincode string, destinationPincode string) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/directpost"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("Quantity", parameterToString(quantity, ""))
	localVarQueryParams.Add("SourcePincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("DestinationPincode", parameterToString(destinationPincode, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Emo Tariff
Gives tariff for Emo
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param eMOAmount EMOAmount

@return HandlerResponse
*/
func (a *DomesticTariffApiService) DomesticproductsTariffEmoGet(ctx context.Context, productCode string, eMOAmount float32) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/emo/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("EMOAmount", parameterToString(eMOAmount, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get IPO Tariff
Gives tariff for IPO
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param iPOAmount IPO Amount

@return HandlerResponse
*/
func (a *DomesticTariffApiService) DomesticproductsTariffIpoGet(ctx context.Context, productCode string, iPOAmount float32) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/ipo/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("IPOAmount", parameterToString(iPOAmount, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Letter Tariff
Gives tariff for Letter
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffLetterGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffLetterGetOpts struct { 
	REG optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	Length optional.String
	Width optional.String
	Height optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffLetterGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffLetterGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/letter"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Letter Card Tariff
Gives tariff for Letter Card
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffLettercardGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "ACK" (optional.String) -  Ack
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffLettercardGetOpts struct { 
	REG optional.String
	ACK optional.String
	Length optional.String
	Width optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffLettercardGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffLettercardGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/lettercard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Magazine Post Tariff
Gives tariff for Magazine Post
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param sourcePincode Source Pincode
 * @param destinationPincode Destination Pincode
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffMagazinepostGetOpts - Optional Parameters:
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffMagazinepostGetOpts struct { 
	Length optional.String
	Width optional.String
	Height optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffMagazinepostGet(ctx context.Context, productCode string, weight string, sourcePincode string, destinationPincode string, localVarOptionals *DomesticTariffApiDomesticproductsTariffMagazinepostGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/magazinepost"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	localVarQueryParams.Add("SourcePincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("DestinationPincode", parameterToString(destinationPincode, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get National Bill Mail Tariff
Gives tariff for National Bill Mail Service
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param quantity Quantity

@return HandlerResponse
*/
func (a *DomesticTariffApiService) DomesticproductsTariffNationalbillmailGet(ctx context.Context, productCode string, weight float32, quantity int32) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/nationalbillmail"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	localVarQueryParams.Add("Quantity", parameterToString(quantity, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Newspaper Tariff
Gives tariff for Newspaper
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffNewspaperGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffNewspaperGetOpts struct { 
	REG optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffNewspaperGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffNewspaperGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/newspaper"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Newspaper Bundle Tariff
Gives tariff for Newspaper Bundle
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffNewspaperbundleGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffNewspaperbundleGetOpts struct { 
	REG optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffNewspaperbundleGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffNewspaperbundleGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/newspaperbundle"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Non Variant Tariff
Gives tariff for Non Variant Products
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code

@return HandlerResponse
*/
func (a *DomesticTariffApiService) DomesticproductsTariffNonvariantproductsProductCodeGet(ctx context.Context, productCode string) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/nonvariantproducts/{ProductCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"ProductCode"+"}", fmt.Sprintf("%v", productCode), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Parcel Tariff
Gives tariff for Parcel
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffParcelGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffParcelGetOpts struct { 
	REG optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffParcelGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffParcelGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/parcel"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Pattern Sample Packet Tariff
Gives tariff for Pattern Sample Packet
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffPatternsamplepacketGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffPatternsamplepacketGetOpts struct { 
	REG optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffPatternsamplepacketGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffPatternsamplepacketGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/patternsamplepacket"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Post Card Tariff
Gives tariff for Post Card
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffPostcardGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "ACK" (optional.String) -  Ack
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffPostcardGetOpts struct { 
	REG optional.String
	ACK optional.String
	Length optional.String
	Width optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffPostcardGet(ctx context.Context, productCode string, localVarOptionals *DomesticTariffApiDomesticproductsTariffPostcardGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/postcard"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Printed Book Tariff
Gives tariff for Printed Book
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffPrintedbookGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "REGC" (optional.String) -  RegC
     * @param "INS" (optional.String) -  Ins
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffPrintedbookGetOpts struct { 
	REG optional.String
	REGC optional.String
	INS optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffPrintedbookGet(ctx context.Context, productCode string, weight string, localVarOptionals *DomesticTariffApiDomesticproductsTariffPrintedbookGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/printedbook"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.REGC.IsSet() {
		localVarQueryParams.Add("REGC", parameterToString(localVarOptionals.REGC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Retail Post Tariff
Gives tariff for Retail Post
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code

@return HandlerResponse
*/
func (a *DomesticTariffApiService) DomesticproductsTariffRetailproductsProductCodeGet(ctx context.Context, productCode string) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/retailproducts/{ProductCode}"
	localVarPath = strings.Replace(localVarPath, "{"+"ProductCode"+"}", fmt.Sprintf("%v", productCode), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
DomesticTariffApiService Get Domestic Speed Post Tariff
Gives tariff for Domestic Speed Post
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param productCode Product Code
 * @param weight Weight
 * @param sourcePincode Source Pincode
 * @param destinationPincode Destination Pincode
 * @param optional nil or *DomesticTariffApiDomesticproductsTariffSpeedpostGetOpts - Optional Parameters:
     * @param "REG" (optional.String) -  Reg
     * @param "INS" (optional.String) -  Ins
     * @param "INSC" (optional.String) -  InsC
     * @param "POD" (optional.String) -  Pod
     * @param "ACK" (optional.String) -  Ack
     * @param "VPP" (optional.String) -  Vpp
     * @param "AMS" (optional.String) -  Ams
     * @param "Length" (optional.String) -  Length
     * @param "Width" (optional.String) -  Width
     * @param "Height" (optional.String) -  Height
     * @param "Diameter" (optional.String) -  Diameter

@return HandlerResponse
*/

type DomesticTariffApiDomesticproductsTariffSpeedpostGetOpts struct { 
	REG optional.String
	INS optional.String
	INSC optional.String
	POD optional.String
	ACK optional.String
	VPP optional.String
	AMS optional.String
	Length optional.String
	Width optional.String
	Height optional.String
	Diameter optional.String
}

func (a *DomesticTariffApiService) DomesticproductsTariffSpeedpostGet(ctx context.Context, productCode string, weight string, sourcePincode string, destinationPincode string, localVarOptionals *DomesticTariffApiDomesticproductsTariffSpeedpostGetOpts) (HandlerResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue HandlerResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/domesticproducts/tariff/speedpost"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("ProductCode", parameterToString(productCode, ""))
	localVarQueryParams.Add("Weight", parameterToString(weight, ""))
	if localVarOptionals != nil && localVarOptionals.REG.IsSet() {
		localVarQueryParams.Add("REG", parameterToString(localVarOptionals.REG.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INS.IsSet() {
		localVarQueryParams.Add("INS", parameterToString(localVarOptionals.INS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.INSC.IsSet() {
		localVarQueryParams.Add("INSC", parameterToString(localVarOptionals.INSC.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.POD.IsSet() {
		localVarQueryParams.Add("POD", parameterToString(localVarOptionals.POD.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ACK.IsSet() {
		localVarQueryParams.Add("ACK", parameterToString(localVarOptionals.ACK.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.VPP.IsSet() {
		localVarQueryParams.Add("VPP", parameterToString(localVarOptionals.VPP.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AMS.IsSet() {
		localVarQueryParams.Add("AMS", parameterToString(localVarOptionals.AMS.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Length.IsSet() {
		localVarQueryParams.Add("Length", parameterToString(localVarOptionals.Length.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Width.IsSet() {
		localVarQueryParams.Add("Width", parameterToString(localVarOptionals.Width.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Height.IsSet() {
		localVarQueryParams.Add("Height", parameterToString(localVarOptionals.Height.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Diameter.IsSet() {
		localVarQueryParams.Add("Diameter", parameterToString(localVarOptionals.Diameter.Value(), ""))
	}
	localVarQueryParams.Add("SourcePincode", parameterToString(sourcePincode, ""))
	localVarQueryParams.Add("DestinationPincode", parameterToString(destinationPincode, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v HandlerResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 404 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v HandlerErrorValidResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

