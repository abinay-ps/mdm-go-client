
/*
 * Master Data Management API
 *
 * A comprehensive API suite for managing various aspects of the postal system, including office management, product management, tariffs (domestic and international), product country mapping, local pin codes, country details, and currency exchange rates. Additionally, the API supports insurance quote generation for PLI/RPLI, and interest rate calculations for savings schemes such as SB, SSA, PPF, MIS, TD, NSC/KVP, SCSS, and MSS.
 *
 * API version: 1.0
 * Contact: support_cept@indiapost.gov.in
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type InsuranceApiService service

/*
InsuranceApiService Generate PLI (Postal Life Insurance) Quote
Generates a quote for Postal Life Insurance based on the provided details such as sum assured, age, periodicity, and policy type.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sumAssured Sum assured for the policy
 * @param ageOnNextBirthday Age of the policyholder on next birthday
 * @param periodicity Periodicity of premium payment (1: Monthly, 2: Quarterly, 3: Half-Yearly, 4: Yearly)
 * @param isNewPolicy Indicates if it is a new policy (1: Yes, 2: No)
 * @param optional nil or *InsuranceApiInsuranceQuotesPliGetOpts - Optional Parameters:
     * @param "SpouseAge" (optional.Float32) -  Age of the spouse (if applicable)
     * @param "ChildAge" (optional.Float32) -  Age of the child (if applicable)
     * @param "SumAssuredChildPolicy" (optional.Float32) -  Sum assured for child policy (if child policy is opted)

@return ResponseGetPliQuoteFinalResponseOffApiResponse
*/

type InsuranceApiInsuranceQuotesPliGetOpts struct { 
	SpouseAge optional.Float32
	ChildAge optional.Float32
	SumAssuredChildPolicy optional.Float32
}

func (a *InsuranceApiService) InsuranceQuotesPliGet(ctx context.Context, sumAssured float32, ageOnNextBirthday float32, periodicity int32, isNewPolicy int32, localVarOptionals *InsuranceApiInsuranceQuotesPliGetOpts) (ResponseGetPliQuoteFinalResponseOffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetPliQuoteFinalResponseOffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/insurance-quotes/pli"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("sum-assured", parameterToString(sumAssured, ""))
	localVarQueryParams.Add("age-on-next-birthday", parameterToString(ageOnNextBirthday, ""))
	if localVarOptionals != nil && localVarOptionals.SpouseAge.IsSet() {
		localVarQueryParams.Add("spouse-age", parameterToString(localVarOptionals.SpouseAge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ChildAge.IsSet() {
		localVarQueryParams.Add("child-age", parameterToString(localVarOptionals.ChildAge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SumAssuredChildPolicy.IsSet() {
		localVarQueryParams.Add("sum-assured-child-policy", parameterToString(localVarOptionals.SumAssuredChildPolicy.Value(), ""))
	}
	localVarQueryParams.Add("periodicity", parameterToString(periodicity, ""))
	localVarQueryParams.Add("is-new-policy", parameterToString(isNewPolicy, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetPliQuoteFinalResponseOffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

/*
InsuranceApiService Generate RPLI (Rural Postal Life Insurance) Quote
Generates a quote for Rural Postal Life Insurance based on the provided details such as sum assured, age, periodicity, and policy type.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param sumAssured Sum assured for the policy
 * @param ageOnNextBirthday Age of the policyholder on next birthday
 * @param periodicity Periodicity of premium payment (1: Monthly, 2: Quarterly, 3: Half-Yearly, 4: Yearly)
 * @param isNewPolicy Indicates if it is a new policy (1: New, 2: Old)
 * @param isNonStdAge Indicates if the age is non-standard (1: Standard, 2: Non-Standard)
 * @param optional nil or *InsuranceApiInsuranceQuotesRpliGetOpts - Optional Parameters:
     * @param "ChildAge" (optional.Float32) -  Age of the child (if applicable)
     * @param "SumAssuredChildPolicy" (optional.Float32) -  Sum assured for child policy (if child policy is opted)

@return ResponseGetRpliQuoteFinalResponseOffApiResponse
*/

type InsuranceApiInsuranceQuotesRpliGetOpts struct { 
	ChildAge optional.Float32
	SumAssuredChildPolicy optional.Float32
}

func (a *InsuranceApiService) InsuranceQuotesRpliGet(ctx context.Context, sumAssured float32, ageOnNextBirthday float32, periodicity int32, isNewPolicy int32, isNonStdAge int32, localVarOptionals *InsuranceApiInsuranceQuotesRpliGetOpts) (ResponseGetRpliQuoteFinalResponseOffApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ResponseGetRpliQuoteFinalResponseOffApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/insurance-quotes/rpli"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarQueryParams.Add("sum-assured", parameterToString(sumAssured, ""))
	localVarQueryParams.Add("age-on-next-birthday", parameterToString(ageOnNextBirthday, ""))
	if localVarOptionals != nil && localVarOptionals.ChildAge.IsSet() {
		localVarQueryParams.Add("child-age", parameterToString(localVarOptionals.ChildAge.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SumAssuredChildPolicy.IsSet() {
		localVarQueryParams.Add("sum-assured-child-policy", parameterToString(localVarOptionals.SumAssuredChildPolicy.Value(), ""))
	}
	localVarQueryParams.Add("periodicity", parameterToString(periodicity, ""))
	localVarQueryParams.Add("is-new-policy", parameterToString(isNewPolicy, ""))
	localVarQueryParams.Add("is-non-std-age", parameterToString(isNonStdAge, ""))
	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		
		if localVarHttpResponse.StatusCode == 200 {
			var v ResponseGetRpliQuoteFinalResponseOffApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 400 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		if localVarHttpResponse.StatusCode == 500 {
			var v ApierrorsApiErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}

